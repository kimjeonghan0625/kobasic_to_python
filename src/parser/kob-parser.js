/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1) => { __ = _1 }],
[0,1,(_1) => { __ = _1 }],
[0,3,(_1,_2,_3) => { __ = _1.concat(_3) }],
[1,2,(_1,_2) => { __ = { number: _1, stmts: _2 } }],
[2,1,(_1) => { __ = [_1] }],
[2,3,(_1,_2,_3) => { __ = [_1].concat(_3) }],
[3,1,(_1) => { __ = { type: 'REM', comment: ""} }],
[3,2,(_1,_2) => { __ = { type: 'REM', comment: _2} }],
[3,2,(_1,_2) => { __ = { type: 'DATA', exprlist: _2 } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'DEF', userfunc: _1, expr: _3 } }],
[3,5,(_1,_2,_3,_4,_5) => { __ = { type: 'DIM', var: _2, dimension: _4 } }],
[3,1,(_1) => { __ = { type: 'END' } }],
[3,6,(_1,_2,_3,_4,_5,_6) => { __ = { type: 'FOR', var: _2, start: _4, end: _6 } }],
[3,8,(_1,_2,_3,_4,_5,_6,_7,_8) => { __ = { type: 'FOR', var: _2, start: _4, end: _6, step: _8 } }],
[3,2,(_1,_2) => { __ = { type: 'GOSUB', number: _2 } }],
[3,2,(_1,_2) => { __ = { type: 'GOTO', number: _2 } }],
[3,2,(_1,_2) => { __ = { type: 'INPUT', varlist: _2 } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'INPUT', varlist: _4, prompt: _2 } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'INPUT', varlist: _4, prompt: _2 } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'IF', expr: _2, action: { type: 'GOTO', number: _4 } } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'IF', expr: _2, action: _4 } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'LET', var: _2, expr: _4 } }],
[3,2,(_1,_2) => { __ = { type: 'NEXT', varlist: _2 } }],
[3,1,(_1) => { __ = { type: 'NEW' } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'ON', expr: _2, action: { type: 'GOTO', targets: _4 } } }],
[3,4,(_1,_2,_3,_4) => { __ = { type: 'ON', expr: _2, action: { type: 'GOSUB', targets: _4 } } }],
[3,2,(_1,_2) => { __ = { type: 'PRINT', printlist: _2 } }],
[3,2,(_1,_2) => { __ = { type: 'READ', varlist: _2 } }],
[3,1,(_1) => { __ = { type: 'RESTORE' } }],
[3,2,(_1,_2) => { __ = { type: 'RESTORE', expr: _2 } }],
[3,1,(_1) => { __ = { type: 'RETURN' } }],
[3,1,(_1) => { __ = { type: 'STOP' } }],
[3,3,(_1,_2,_3) => { __ = { type: 'ASSIGN', var: _1, expr: _3 } }],
[4,1,(_1) => { __ = _1 }],
[5,1,(_1) => { __ = _1 }],
[5,3,(_1,_2,_3) => { __ = { type: 'AND', left: _1, right: _3 } }],
[5,3,(_1,_2,_3) => { __ = { type: 'OR', left: _1, right: _3 } }],
[6,1,(_1) => { __ = _1 }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_EQ', left: _1, right: _3 } }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_LT', left: _1, right: _3 } }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_GT', left: _1, right: _3 } }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_LE', left: _1, right: _3 } }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_GE', left: _1, right: _3 } }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_NE', left: _1, right: _3 } }],
[6,3,(_1,_2,_3) => { __ = { type: 'CMP_HASH', left: _1, right: _3 } }],
[7,1,(_1) => { __ = _1 }],
[7,3,(_1,_2,_3) => { __ = { type: 'ADD', left: _1, right: _3 } }],
[7,3,(_1,_2,_3) => { __ = { type: 'SUB', left: _1, right: _3 } }],
[7,3,(_1,_2,_3) => { __ = { type: 'CONCAT', left: _1, right: _3 } }],
[8,1,(_1) => { __ = _1 }],
[8,3,(_1,_2,_3) => { __ = { type: 'MUL', left: _1, right: _3 } }],
[8,3,(_1,_2,_3) => { __ = { type: 'DIV', left: _1, right: _3 } }],
[8,3,(_1,_2,_3) => { __ = { type: 'POW', left: _1, right: _3 } }],
[9,1,(_1) => { __ = _1 }],
[9,2,(_1,_2) => { __ = { type: 'NEG', expr: _2 } }],
[9,2,(_1,_2) => { __ = { type: 'NOT', expr: _2 } }],
[10,1,(_1) => { __ = _1 }],
[10,3,(_1,_2,_3) => { __ = { type: 'fn0', args: [] } }],
[10,4,(_1,_2,_3,_4) => { __ = { type: 'fn0', args: [_3] } }],
[10,4,(_1,_2,_3,_4) => { __ = { type: 'fn1', args: [_3] } }],
[10,6,(_1,_2,_3,_4,_5,_6) => { __ = { type: 'fn2', args: [_3, _5] } }],
[10,8,(_1,_2,_3,_4,_5,_6,_7,_8) => { __ = { type: 'fnx', args: [_3, _5, _7] } }],
[11,1,(_1) => { __ = { type: 'NUMBER', value: Number(_1) } }],
[11,1,(_1) => { __ = { type: 'STRING', value: _1 } }],
[11,1,(_1) => { __ = _1 }],
[11,1,(_1) => { __ = _1 }],
[11,3,(_1,_2,_3) => { __ = _2 }],
[12,1,(_1) => { __ = { type: 'VARIABLE_NAME', name: _1 } }],
[12,4,(_1,_2,_3,_4) => { __ = { type: 'VARIABLE_NAME', name: _1, args: _3 } }],
[13,1,(_1) => { __ = [_1] }],
[13,3,(_1,_2,_3) => { __ = _1.concat([_3]) }],
[13,3,(_1,_2,_3) => { __ = _1.concat([_3]) }],
[14,1,(_1) => { __ = [_1] }],
[14,3,(_1,_2,_3) => { __ = _1.concat([_3]) }],
[15,1,(_1) => { __ = [_1] }],
[15,3,(_1,_2,_3) => { __ = _1.concat([_3]) }]];

/**
 * Encoded tokens map.
 */
const tokens = {"\\n":"16","NUMBER":"17",":":"18","REM":"19","STRING":"20","DATA":"21","DEF":"22","userfunc":"23","=":"24","DIM":"25","VARIABLE_NAME":"26","(":"27",")":"28","END":"29","FOR":"30","TO":"31","STEP":"32","GOSUB":"33","GOTO":"34","INPUT":"35",";":"36",",":"37","IF":"38","THEN":"39","LET":"40","NEXT":"41","NEW":"42","ON":"43","PRINT":"44","READ":"45","RESTORE":"46","RETURN":"47","STOP":"48","AND":"49","OR":"50","<":"51",">":"52","CMP_LE":"53","CMP_GE":"54","CMP_NE":"55","CMP_HASH":"56","+":"57","-":"58","&":"59","*":"60","/":"61","^":"62","NOT":"63","fn0":"64","fn1":"65","fn2":"66","fnx":"67","$":"68"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"17":"s3"},{"16":"s4","68":"acc"},{"16":"r1","68":"r1"},{"2":6,"3":7,"12":27,"19":"s8","21":"s9","22":"s10","25":"s11","26":"s28","29":"s12","30":"s13","33":"s14","34":"s15","35":"s16","38":"s17","40":"s18","41":"s19","42":"s20","43":"s21","44":"s22","45":"s23","46":"s24","47":"s25","48":"s26"},{"1":5,"17":"s3"},{"16":"r2","68":"r2"},{"16":"r3","68":"r3"},{"16":"r4","18":"s29","68":"r4"},{"16":"r6","18":"r6","20":"s31","68":"r6"},{"4":33,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"14":32,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"23":"s110"},{"26":"s113"},{"16":"r11","18":"r11","68":"r11"},{"12":117,"26":"s28"},{"17":"s124"},{"17":"s125"},{"12":128,"15":126,"20":"s127","26":"s28"},{"4":135,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"12":140,"26":"s28"},{"12":128,"15":143,"26":"s28"},{"16":"r23","18":"r23","68":"r23"},{"4":144,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"4":150,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"13":149,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"12":128,"15":155,"26":"s28"},{"4":156,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"16":"r28","17":"s47","18":"r28","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46","68":"r28"},{"16":"r30","18":"r30","68":"r30"},{"16":"r31","18":"r31","68":"r31"},{"24":"s157"},{"16":"r67","18":"r67","24":"r67","27":"s101","28":"r67","31":"r67","32":"r67","33":"r67","34":"r67","36":"r67","37":"r67","39":"r67","49":"r67","50":"r67","51":"r67","52":"r67","53":"r67","54":"r67","55":"r67","56":"r67","57":"r67","58":"r67","59":"r67","60":"r67","61":"r67","62":"r67","68":"r67"},{"2":30,"3":7,"12":27,"19":"s8","21":"s9","22":"s10","25":"s11","26":"s28","29":"s12","30":"s13","33":"s14","34":"s15","35":"s16","38":"s17","40":"s18","41":"s19","42":"s20","43":"s21","44":"s22","45":"s23","46":"s24","47":"s25","48":"s26"},{"16":"r5","68":"r5"},{"16":"r7","18":"r7","68":"r7"},{"16":"r8","18":"r8","37":"s52","68":"r8"},{"16":"r72","18":"r72","28":"r72","37":"r72","68":"r72"},{"16":"r33","18":"r33","28":"r33","31":"r33","32":"r33","33":"r33","34":"r33","36":"r33","37":"r33","39":"r33","49":"s54","50":"s55","68":"r33"},{"16":"r34","18":"r34","24":"s57","28":"r34","31":"r34","32":"r34","33":"r34","34":"r34","36":"r34","37":"r34","39":"r34","49":"r34","50":"r34","51":"s58","52":"s59","53":"s60","54":"s61","55":"s62","56":"s63","68":"r34"},{"16":"r37","18":"r37","24":"r37","28":"r37","31":"r37","32":"r37","33":"r37","34":"r37","36":"r37","37":"r37","39":"r37","49":"r37","50":"r37","51":"r37","52":"r37","53":"r37","54":"r37","55":"r37","56":"r37","57":"s65","58":"s66","59":"s67","68":"r37"},{"16":"r45","18":"r45","24":"r45","28":"r45","31":"r45","32":"r45","33":"r45","34":"r45","36":"r45","37":"r45","39":"r45","49":"r45","50":"r45","51":"r45","52":"r45","53":"r45","54":"r45","55":"r45","56":"r45","57":"r45","58":"r45","59":"r45","60":"s69","61":"s70","62":"s71","68":"r45"},{"16":"r49","18":"r49","24":"r49","28":"r49","31":"r49","32":"r49","33":"r49","34":"r49","36":"r49","37":"r49","39":"r49","49":"r49","50":"r49","51":"r49","52":"r49","53":"r49","54":"r49","55":"r49","56":"r49","57":"r49","58":"r49","59":"r49","60":"r49","61":"r49","62":"r49","68":"r49"},{"16":"r53","18":"r53","24":"r53","28":"r53","31":"r53","32":"r53","33":"r53","34":"r53","36":"r53","37":"r53","39":"r53","49":"r53","50":"r53","51":"r53","52":"r53","53":"r53","54":"r53","55":"r53","56":"r53","57":"r53","58":"r53","59":"r53","60":"r53","61":"r53","62":"r53","68":"r53"},{"10":73,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","64":"s43","65":"s44","66":"s45","67":"s46"},{"10":81,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r56","18":"r56","24":"r56","28":"r56","31":"r56","32":"r56","33":"r56","34":"r56","36":"r56","37":"r56","39":"r56","49":"r56","50":"r56","51":"r56","52":"r56","53":"r56","54":"r56","55":"r56","56":"r56","57":"r56","58":"r56","59":"r56","60":"r56","61":"r56","62":"r56","68":"r56"},{"27":"s74"},{"27":"s82"},{"27":"s87"},{"27":"s92"},{"16":"r62","18":"r62","24":"r62","28":"r62","31":"r62","32":"r62","33":"r62","34":"r62","36":"r62","37":"r62","39":"r62","49":"r62","50":"r62","51":"r62","52":"r62","53":"r62","54":"r62","55":"r62","56":"r62","57":"r62","58":"r62","59":"r62","60":"r62","61":"r62","62":"r62","68":"r62"},{"16":"r63","18":"r63","24":"r63","28":"r63","31":"r63","32":"r63","33":"r63","34":"r63","36":"r63","37":"r63","39":"r63","49":"r63","50":"r63","51":"r63","52":"r63","53":"r63","54":"r63","55":"r63","56":"r63","57":"r63","58":"r63","59":"r63","60":"r63","61":"r63","62":"r63","68":"r63"},{"16":"r64","18":"r64","24":"r64","28":"r64","31":"r64","32":"r64","33":"r64","34":"r64","36":"r64","37":"r64","39":"r64","49":"r64","50":"r64","51":"r64","52":"r64","53":"r64","54":"r64","55":"r64","56":"r64","57":"r64","58":"r64","59":"r64","60":"r64","61":"r64","62":"r64","68":"r64"},{"16":"r65","18":"r65","24":"r65","28":"r65","31":"r65","32":"r65","33":"r65","34":"r65","36":"r65","37":"r65","39":"r65","49":"r65","50":"r65","51":"r65","52":"r65","53":"r65","54":"r65","55":"r65","56":"r65","57":"r65","58":"r65","59":"r65","60":"r65","61":"r65","62":"r65","68":"r65"},{"4":99,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"4":53,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r73","18":"r73","28":"r73","37":"r73","68":"r73"},{"6":56,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"6":109,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r35","18":"r35","24":"s57","28":"r35","31":"r35","32":"r35","33":"r35","34":"r35","36":"r35","37":"r35","39":"r35","49":"r35","50":"r35","51":"s58","52":"s59","53":"s60","54":"s61","55":"s62","56":"s63","68":"r35"},{"7":64,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"7":78,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"7":104,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"7":105,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"7":106,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"7":107,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"7":108,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r38","18":"r38","24":"r38","28":"r38","31":"r38","32":"r38","33":"r38","34":"r38","36":"r38","37":"r38","39":"r38","49":"r38","50":"r38","51":"r38","52":"r38","53":"r38","54":"r38","55":"r38","56":"r38","57":"s65","58":"s66","59":"s67","68":"r38"},{"8":68,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"8":79,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"8":85,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r46","18":"r46","24":"r46","28":"r46","31":"r46","32":"r46","33":"r46","34":"r46","36":"r46","37":"r46","39":"r46","49":"r46","50":"r46","51":"r46","52":"r46","53":"r46","54":"r46","55":"r46","56":"r46","57":"r46","58":"r46","59":"r46","60":"s69","61":"s70","62":"s71","68":"r46"},{"9":72,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"9":80,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"9":86,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r50","18":"r50","24":"r50","28":"r50","31":"r50","32":"r50","33":"r50","34":"r50","36":"r50","37":"r50","39":"r50","49":"r50","50":"r50","51":"r50","52":"r50","53":"r50","54":"r50","55":"r50","56":"r50","57":"r50","58":"r50","59":"r50","60":"r50","61":"r50","62":"r50","68":"r50"},{"16":"r54","18":"r54","24":"r54","28":"r54","31":"r54","32":"r54","33":"r54","34":"r54","36":"r54","37":"r54","39":"r54","49":"r54","50":"r54","51":"r54","52":"r54","53":"r54","54":"r54","55":"r54","56":"r54","57":"r54","58":"r54","59":"r54","60":"r54","61":"r54","62":"r54","68":"r54"},{"4":76,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","28":"s75","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r57","18":"r57","24":"r57","28":"r57","31":"r57","32":"r57","33":"r57","34":"r57","36":"r57","37":"r57","39":"r57","49":"r57","50":"r57","51":"r57","52":"r57","53":"r57","54":"r57","55":"r57","56":"r57","57":"r57","58":"r57","59":"r57","60":"r57","61":"r57","62":"r57","68":"r57"},{"28":"s77"},{"16":"r58","18":"r58","24":"r58","28":"r58","31":"r58","32":"r58","33":"r58","34":"r58","36":"r58","37":"r58","39":"r58","49":"r58","50":"r58","51":"r58","52":"r58","53":"r58","54":"r58","55":"r58","56":"r58","57":"r58","58":"r58","59":"r58","60":"r58","61":"r58","62":"r58","68":"r58"},{"16":"r39","18":"r39","24":"r39","28":"r39","31":"r39","32":"r39","33":"r39","34":"r39","36":"r39","37":"r39","39":"r39","49":"r39","50":"r39","51":"r39","52":"r39","53":"r39","54":"r39","55":"r39","56":"r39","57":"s65","58":"s66","59":"s67","68":"r39"},{"16":"r47","18":"r47","24":"r47","28":"r47","31":"r47","32":"r47","33":"r47","34":"r47","36":"r47","37":"r47","39":"r47","49":"r47","50":"r47","51":"r47","52":"r47","53":"r47","54":"r47","55":"r47","56":"r47","57":"r47","58":"r47","59":"r47","60":"s69","61":"s70","62":"s71","68":"r47"},{"16":"r51","18":"r51","24":"r51","28":"r51","31":"r51","32":"r51","33":"r51","34":"r51","36":"r51","37":"r51","39":"r51","49":"r51","50":"r51","51":"r51","52":"r51","53":"r51","54":"r51","55":"r51","56":"r51","57":"r51","58":"r51","59":"r51","60":"r51","61":"r51","62":"r51","68":"r51"},{"16":"r55","18":"r55","24":"r55","28":"r55","31":"r55","32":"r55","33":"r55","34":"r55","36":"r55","37":"r55","39":"r55","49":"r55","50":"r55","51":"r55","52":"r55","53":"r55","54":"r55","55":"r55","56":"r55","57":"r55","58":"r55","59":"r55","60":"r55","61":"r55","62":"r55","68":"r55"},{"4":83,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"28":"s84"},{"16":"r59","18":"r59","24":"r59","28":"r59","31":"r59","32":"r59","33":"r59","34":"r59","36":"r59","37":"r59","39":"r59","49":"r59","50":"r59","51":"r59","52":"r59","53":"r59","54":"r59","55":"r59","56":"r59","57":"r59","58":"r59","59":"r59","60":"r59","61":"r59","62":"r59","68":"r59"},{"16":"r48","18":"r48","24":"r48","28":"r48","31":"r48","32":"r48","33":"r48","34":"r48","36":"r48","37":"r48","39":"r48","49":"r48","50":"r48","51":"r48","52":"r48","53":"r48","54":"r48","55":"r48","56":"r48","57":"r48","58":"r48","59":"r48","60":"s69","61":"s70","62":"s71","68":"r48"},{"16":"r52","18":"r52","24":"r52","28":"r52","31":"r52","32":"r52","33":"r52","34":"r52","36":"r52","37":"r52","39":"r52","49":"r52","50":"r52","51":"r52","52":"r52","53":"r52","54":"r52","55":"r52","56":"r52","57":"r52","58":"r52","59":"r52","60":"r52","61":"r52","62":"r52","68":"r52"},{"4":88,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"37":"s89"},{"4":90,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"28":"s91"},{"16":"r60","18":"r60","24":"r60","28":"r60","31":"r60","32":"r60","33":"r60","34":"r60","36":"r60","37":"r60","39":"r60","49":"r60","50":"r60","51":"r60","52":"r60","53":"r60","54":"r60","55":"r60","56":"r60","57":"r60","58":"r60","59":"r60","60":"r60","61":"r60","62":"r60","68":"r60"},{"4":93,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"37":"s94"},{"4":95,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"37":"s96"},{"4":97,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"28":"s98"},{"16":"r61","18":"r61","24":"r61","28":"r61","31":"r61","32":"r61","33":"r61","34":"r61","36":"r61","37":"r61","39":"r61","49":"r61","50":"r61","51":"r61","52":"r61","53":"r61","54":"r61","55":"r61","56":"r61","57":"r61","58":"r61","59":"r61","60":"r61","61":"r61","62":"r61","68":"r61"},{"28":"s100"},{"16":"r66","18":"r66","24":"r66","28":"r66","31":"r66","32":"r66","33":"r66","34":"r66","36":"r66","37":"r66","39":"r66","49":"r66","50":"r66","51":"r66","52":"r66","53":"r66","54":"r66","55":"r66","56":"r66","57":"r66","58":"r66","59":"r66","60":"r66","61":"r66","62":"r66","68":"r66"},{"4":33,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"14":102,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"28":"s103","37":"s52"},{"16":"r68","18":"r68","24":"r68","28":"r68","31":"r68","32":"r68","33":"r68","34":"r68","36":"r68","37":"r68","39":"r68","49":"r68","50":"r68","51":"r68","52":"r68","53":"r68","54":"r68","55":"r68","56":"r68","57":"r68","58":"r68","59":"r68","60":"r68","61":"r68","62":"r68","68":"r68"},{"16":"r40","18":"r40","24":"r40","28":"r40","31":"r40","32":"r40","33":"r40","34":"r40","36":"r40","37":"r40","39":"r40","49":"r40","50":"r40","51":"r40","52":"r40","53":"r40","54":"r40","55":"r40","56":"r40","57":"s65","58":"s66","59":"s67","68":"r40"},{"16":"r41","18":"r41","24":"r41","28":"r41","31":"r41","32":"r41","33":"r41","34":"r41","36":"r41","37":"r41","39":"r41","49":"r41","50":"r41","51":"r41","52":"r41","53":"r41","54":"r41","55":"r41","56":"r41","57":"s65","58":"s66","59":"s67","68":"r41"},{"16":"r42","18":"r42","24":"r42","28":"r42","31":"r42","32":"r42","33":"r42","34":"r42","36":"r42","37":"r42","39":"r42","49":"r42","50":"r42","51":"r42","52":"r42","53":"r42","54":"r42","55":"r42","56":"r42","57":"s65","58":"s66","59":"s67","68":"r42"},{"16":"r43","18":"r43","24":"r43","28":"r43","31":"r43","32":"r43","33":"r43","34":"r43","36":"r43","37":"r43","39":"r43","49":"r43","50":"r43","51":"r43","52":"r43","53":"r43","54":"r43","55":"r43","56":"r43","57":"s65","58":"s66","59":"s67","68":"r43"},{"16":"r44","18":"r44","24":"r44","28":"r44","31":"r44","32":"r44","33":"r44","34":"r44","36":"r44","37":"r44","39":"r44","49":"r44","50":"r44","51":"r44","52":"r44","53":"r44","54":"r44","55":"r44","56":"r44","57":"s65","58":"s66","59":"s67","68":"r44"},{"16":"r36","18":"r36","24":"s57","28":"r36","31":"r36","32":"r36","33":"r36","34":"r36","36":"r36","37":"r36","39":"r36","49":"r36","50":"r36","51":"s58","52":"s59","53":"s60","54":"s61","55":"s62","56":"s63","68":"r36"},{"24":"s111"},{"4":112,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r9","18":"r9","68":"r9"},{"27":"s114"},{"4":33,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"14":115,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"28":"s116","37":"s52"},{"16":"r10","18":"r10","68":"r10"},{"24":"s118"},{"4":119,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"31":"s120"},{"4":121,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r12","18":"r12","32":"s122","68":"r12"},{"4":123,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r13","18":"r13","68":"r13"},{"16":"r14","18":"r14","68":"r14"},{"16":"r15","18":"r15","68":"r15"},{"16":"r16","18":"r16","37":"s129","68":"r16"},{"36":"s131","37":"s132"},{"16":"r74","18":"r74","37":"r74","68":"r74"},{"12":130,"26":"s28"},{"16":"r75","18":"r75","37":"r75","68":"r75"},{"12":128,"15":133,"26":"s28"},{"12":128,"15":134,"26":"s28"},{"16":"r17","18":"r17","37":"s129","68":"r17"},{"16":"r18","18":"r18","37":"s129","68":"r18"},{"34":"s136","39":"s137"},{"17":"s138"},{"3":139,"12":27,"19":"s8","21":"s9","22":"s10","25":"s11","26":"s28","29":"s12","30":"s13","33":"s14","34":"s15","35":"s16","38":"s17","40":"s18","41":"s19","42":"s20","43":"s21","44":"s22","45":"s23","46":"s24","47":"s25","48":"s26"},{"16":"r19","18":"r19","68":"r19"},{"16":"r20","18":"r20","68":"r20"},{"24":"s141"},{"4":142,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r21","18":"r21","68":"r21"},{"16":"r22","18":"r22","37":"s129","68":"r22"},{"33":"s146","34":"s145"},{"4":33,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"14":147,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"4":33,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"14":148,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r24","18":"r24","37":"s52","68":"r24"},{"16":"r25","18":"r25","37":"s52","68":"r25"},{"16":"r26","18":"r26","36":"s151","37":"s152","68":"r26"},{"16":"r69","18":"r69","36":"r69","37":"r69","68":"r69"},{"4":153,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"4":154,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r70","18":"r70","36":"r70","37":"r70","68":"r70"},{"16":"r71","18":"r71","36":"r71","37":"r71","68":"r71"},{"16":"r27","18":"r27","37":"s129","68":"r27"},{"16":"r29","18":"r29","68":"r29"},{"4":158,"5":34,"6":35,"7":36,"8":37,"9":38,"10":39,"11":42,"12":49,"17":"s47","20":"s48","23":"s50","26":"s28","27":"s51","58":"s40","63":"s41","64":"s43","65":"s44","66":"s45","67":"s46"},{"16":"r32","18":"r32","68":"r32"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\s+/, function() { /* skip whitespace */ }],
[/^[+-]?\d+(\.\d+)?/, function() { return 'NUMBER' }],
[/^\+/, function() { return '+' }],
[/^-/, function() { return '-' }],
[/^\*/, function() { return '*' }],
[/^\//, function() { return '/' }],
[/^\^/, function() { return '^' }],
[/^\(/, function() { return '(' }],
[/^\)/, function() { return ')' }],
[/^,/, function() { return ',' }],
[/^:/, function() { return ':' }],
[/^;/, function() { return ';' }],
[/^<=/, function() { return 'CMP_LE' }],
[/^>=/, function() { return 'CMP_GE' }],
[/^<>/, function() { return 'CMP_NE' }],
[/^</, function() { return '<' }],
[/^>/, function() { return '>' }],
[/^=/, function() { return '=' }],
[/^#/, function() { return 'CMP_HASH' }],
[/^(NOT|아니다)/, function() { return 'NOT' }],
[/^(AND|이고)/, function() { return 'AND' }],
[/^(OR|또는)/, function() { return 'OR' }],
[/^(REM|주석)/, function() { return 'REM' }],
[/^DATA/, function() { return 'DATA' }],
[/^DEF/, function() { return 'DEF' }],
[/^(DIM|배열)/, function() { return 'DIM' }],
[/^(END|끝)/, function() { return 'END' }],
[/^(FOR|반복)/, function() { return 'FOR' }],
[/^(TO|부터)/, function() { return 'TO' }],
[/^(STEP|증가분|단계)/, function() { return 'STEP' }],
[/^(GOSUB|서브)/, function() { return 'GOSUB' }],
[/^(GOTO|이동)/, function() { return 'GOTO' }],
[/^(INPUT|입력)/, function() { return 'INPUT' }],
[/^(IF|만약)/, function() { return 'IF' }],
[/^(THEN|참이면)/, function() { return 'THEN' }],
[/^(LET|할당)/, function() { return 'LET' }],
[/^(NEXT|다음)/, function() { return 'NEXT' }],
[/^NEW/, function() { return 'NEW' }],
[/^ON/, function() { return 'ON' }],
[/^(PRINT|출력)/, function() { return 'PRINT' }],
[/^READ/, function() { return 'READ' }],
[/^RESTORE/, function() { return 'RESTORE' }],
[/^(RETURN|반환)/, function() { return 'RETURN' }],
[/^STOP/, function() { return 'STOP' }],
[/^FUNCTION_NAME/, function() { return 'FUNCTION_NAME' }],
[/^[a-zA-Z가-힣][a-zA-Z가-힣0-9]*/, function() { return 'VARIABLE_NAME' }],
[/^"[^"]*"/, function() { return 'STRING' }],
[/^MID/, function() { return 'MID' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: false,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};



function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
