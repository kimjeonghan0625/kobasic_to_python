/**
    * S-expression parser.
    * Atom: 42, foo, bar, "hello world"
    * List: (), (+ 5 x), (print "hello")
*/

// ----------------------
// Lexical grammar (tokens):
%lex

%%

\/\/.*              /* skip comments */
\/\*[\s\S]*?\*\/    /* skip comments */
\s+                 /* skip whitespace */
\-\d+\.\d+           return 'NUMBER'
\+\d+\.\d+           return 'NUMBER'
\d+\.\d+            return 'NUMBER'
\-\d+                return 'NUMBER'
\+\d+                return 'NUMBER'
\d+                 return 'NUMBER'
\"[^\"]*\"          return 'STRING'
[\w\-+*=<>/:.!가-힣\$\^;]+     return 'SYMBOL'

/lex

// ----------------------
// Syntactic grammar (BNF):

%%

Exp
    : Atom
    | List
    ;

Atom
    : NUMBER { $$ = Number($1) }
    | STRING
    | SYMBOL
    ;

List
    : '(' ListEntries ')' { $$ = $2 }
    ;

ListEntries
    : ListEntries Exp { $1.push($2); $$ = $1 }
    | /* empty */     { $$ = [] }
    ;